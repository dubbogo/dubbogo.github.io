{
  "filename": "triple-health-check.md",
  "__html": "<pre><code>---\ntitle: 基于Grpc的健康检查\nkeywords: 基于Grpc的健康检查\ndescription: 基于Grpc的健康检查\n---\n</code></pre>\n<h4>Grpc健康检查</h4>\n<p>Grpc健康检查是通过一个普通的用户rpc调用进行实现，Grpc的健康检查定义了如下的protobuf，这样就能实现所有的Grpc协议健康检查的互通。</p>\n<blockquote>\n<p>Firstly, since it is a GRPC service itself, doing a health check is in the same format as a normal rpc. Secondly, it has rich semantics such as per-service health status. Thirdly, as a GRPC service, it is able reuse all the existing billing, quota infrastructure, etc, and thus the server has full control over the access of the health checking service.</p>\n</blockquote>\n<pre><code class=\"language-protobuf\">syntax = \"proto3\";\n\npackage grpc.health.v1;\n\nmessage HealthCheckRequest {\n  string service = 1;\n}\n\nmessage HealthCheckResponse {\n  enum ServingStatus {\n    UNKNOWN = 0;\n    SERVING = 1;\n    NOT_SERVING = 2;\n    SERVICE_UNKNOWN = 3;  // Used only by the Watch method.\n  }\n  ServingStatus status = 1;\n}\n\nservice Health {\n  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);\n\n  rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse);\n}\n</code></pre>\n<h4>triple健康检查服务</h4>\n<ul>\n<li>Dubbo-go框架在启动后会自动向框架中注册健康检查服务，提供基于grpc health proto的健康检查服务，无需在配置文件中额外配置。</li>\n<li>triple健康检查服务可以通过grpc-health-probe检查框架中服务的状态，也可以通过grpc调用该健康检查服务，但是不能通过triple客户端调用该健康检查服务(基于grpc的健康检查服务不通过注册中心注册)，调用的服务名为“grpc.health.v1.Health”，接口为check。</li>\n</ul>\n<h5>通过gprc客户端调用健康检查服务：</h5>\n<ul>\n<li>启动dubbo-go-samples中的<a href=\"https://github.com/apache/dubbo-go-samples/tree/master/rpc/triple/pb/dubbogo-grpc/go-server\">triple服务</a>，通过下面的grpc客户端便可以查看&quot;org.apache.dubbogo.samples.api.Greeter&quot;的状态。triple健康检查服务与grpc互通，所以可以通过grpc客户端查看基于triple协议服务的健康状态。</li>\n</ul>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"context\"</span>\n\t<span class=\"hljs-string\">\"fmt\"</span>\n\t<span class=\"hljs-string\">\"log\"</span>\n)\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"google.golang.org/grpc\"</span>\n\n\t<span class=\"hljs-string\">\"google.golang.org/grpc/credentials/insecure\"</span>\n\n\thealthpb <span class=\"hljs-string\">\"google.golang.org/grpc/health/grpc_health_v1\"</span>\n)\n\n<span class=\"hljs-keyword\">const</span> (\n\taddress = <span class=\"hljs-string\">\"localhost:20000\"</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-comment\">// Set up a connection to the server</span>\n\tconn, err := grpc.Dial(address, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\tlog.Fatalf(<span class=\"hljs-string\">\"did not connect: %v\"</span>, err)\n\t}\n\n\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> {\n\t\t_ = conn.Close()\n\t}()\n\t\n\tcheckHealth(<span class=\"hljs-string\">\"org.apache.dubbogo.samples.api.Greeter\"</span>, conn)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">checkHealth</span><span class=\"hljs-params\">(service <span class=\"hljs-keyword\">string</span>, conn *grpc.ClientConn)</span></span> {\n\tfmt.Printf(<span class=\"hljs-string\">\"&gt;&gt;&gt;&gt;&gt; gRPC-go check %s status\"</span>, service)\n\n\treq := &amp;healthpb.HealthCheckRequest{\n\t\tService: service,\n\t}\n\tctx := context.Background()\n\trsp, err := healthpb.NewHealthClient(conn).Check(ctx, req)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\tfmt.Printf(<span class=\"hljs-string\">\"get service status = %+v\\n\"</span>, rsp)\n}\n</code></pre>\n<h5>grpc-health-probe调试健康检查服务：</h5>\n<ul>\n<li>启动dubbo-go-samples中的<a href=\"https://github.com/apache/dubbo-go-samples/tree/master/rpc/triple/pb/dubbogo-grpc/go-server\">triple服务</a>，提供<code>org.apache.dubbogo.samples.api.Greeter</code>服务。使用grpc-health-probe检查该服务的健康状态，<code>grpc-health-probe -addr=localhost:20000 -service &quot;org.apache.dubbogo.samples.api.Greeter&quot;</code></li>\n</ul>\n<p><img src=\"https://picture-table.oss-cn-beijing.aliyuncs.com/img/image-20220620162015613.png\" alt=\"image-20220620162015613\"></p>\n<h4>参考：</h4>\n<ul>\n<li><a href=\"https://github.com/grpc/grpc/blob/master/doc/health-checking.md\">https://github.com/grpc/grpc/blob/master/doc/health-checking.md</a></li>\n<li><a href=\"https://github.com/grpc/grpc-go/tree/master/health\">https://github.com/grpc/grpc-go/tree/master/health</a></li>\n</ul>\n",
  "link": "/zh-cn/docs/user/tasks/service_management/triple-health-check.html",
  "meta": {}
}